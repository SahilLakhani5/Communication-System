// ------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\gm_tx_rx_filter\FIR_Interpolation
// Created: 2022-06-15 15:15:26
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// ------------------------------------------------------------
// 
// 
// ------------------------------------------------------------
// 
// Module: FIR_Interpolation
// Source Path: /FIR_Interpolation
// 
// ------------------------------------------------------------
// 
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// Multipliers           : 9



`timescale 1 ns / 1 ns

module FIR_Interpolation
               (
                clk,
                enb_1_2500000_1,
                reset,
                FIR_Interpolation_in,
                FIR_Interpolation_out
                );

  input   clk; 
  input   enb_1_2500000_1; 
  input   reset; 
  input   signed [15:0] FIR_Interpolation_in; //sfix16_En12
  output  signed [15:0] FIR_Interpolation_out; //sfix16_En12

////////////////////////////////////////////////////////////////
//Module Architecture: FIR_Interpolation
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeffphase1_1 = 16'b1111111111100011; //sfix16_En15
  parameter signed [15:0] coeffphase1_2 = 16'b0000000011011011; //sfix16_En15
  parameter signed [15:0] coeffphase1_3 = 16'b0000000110000110; //sfix16_En15
  parameter signed [15:0] coeffphase1_4 = 16'b1111100011000001; //sfix16_En15
  parameter signed [15:0] coeffphase1_5 = 16'b0100101001111111; //sfix16_En15
  parameter signed [15:0] coeffphase1_6 = 16'b1111100011000001; //sfix16_En15
  parameter signed [15:0] coeffphase1_7 = 16'b0000000110000110; //sfix16_En15
  parameter signed [15:0] coeffphase1_8 = 16'b0000000011011011; //sfix16_En15
  parameter signed [15:0] coeffphase1_9 = 16'b1111111111100011; //sfix16_En15
  parameter signed [15:0] coeffphase2_1 = 16'b1111111101110101; //sfix16_En15
  parameter signed [15:0] coeffphase2_2 = 16'b1111111110110011; //sfix16_En15
  parameter signed [15:0] coeffphase2_3 = 16'b0000000111010000; //sfix16_En15
  parameter signed [15:0] coeffphase2_4 = 16'b0000011111011001; //sfix16_En15
  parameter signed [15:0] coeffphase2_5 = 16'b0011111011110101; //sfix16_En15
  parameter signed [15:0] coeffphase2_6 = 16'b1111011111011010; //sfix16_En15
  parameter signed [15:0] coeffphase2_7 = 16'b1111111101011101; //sfix16_En15
  parameter signed [15:0] coeffphase2_8 = 16'b0000000010111111; //sfix16_En15
  parameter signed [15:0] coeffphase2_9 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase3_1 = 16'b1111111111011101; //sfix16_En15
  parameter signed [15:0] coeffphase3_2 = 16'b1111111010011010; //sfix16_En15
  parameter signed [15:0] coeffphase3_3 = 16'b1111110110101000; //sfix16_En15
  parameter signed [15:0] coeffphase3_4 = 16'b0010001101111000; //sfix16_En15
  parameter signed [15:0] coeffphase3_5 = 16'b0010001101111000; //sfix16_En15
  parameter signed [15:0] coeffphase3_6 = 16'b1111110110101000; //sfix16_En15
  parameter signed [15:0] coeffphase3_7 = 16'b1111111010011010; //sfix16_En15
  parameter signed [15:0] coeffphase3_8 = 16'b1111111111011101; //sfix16_En15
  parameter signed [15:0] coeffphase3_9 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase4_1 = 16'b0000000010111111; //sfix16_En15
  parameter signed [15:0] coeffphase4_2 = 16'b1111111101011101; //sfix16_En15
  parameter signed [15:0] coeffphase4_3 = 16'b1111011111011010; //sfix16_En15
  parameter signed [15:0] coeffphase4_4 = 16'b0011111011110101; //sfix16_En15
  parameter signed [15:0] coeffphase4_5 = 16'b0000011111011001; //sfix16_En15
  parameter signed [15:0] coeffphase4_6 = 16'b0000000111010000; //sfix16_En15
  parameter signed [15:0] coeffphase4_7 = 16'b1111111110110011; //sfix16_En15
  parameter signed [15:0] coeffphase4_8 = 16'b1111111101110101; //sfix16_En15
  parameter signed [15:0] coeffphase4_9 = 16'b0000000000000000; //sfix16_En15

  // Signals
  reg  [1:0] cur_count; // ufix2
  wire phase_3; // boolean
  reg  signed [15:0] delay_pipeline [0:7] ; // sfix16_En12
  wire signed [31:0] product; // sfix32_En27
  wire signed [15:0] product_mux; // sfix16_En15
  wire signed [31:0] product_1; // sfix32_En27
  wire signed [15:0] product_mux_1; // sfix16_En15
  wire signed [31:0] product_2; // sfix32_En27
  wire signed [15:0] product_mux_2; // sfix16_En15
  wire signed [31:0] product_3; // sfix32_En27
  wire signed [15:0] product_mux_3; // sfix16_En15
  wire signed [31:0] product_4; // sfix32_En27
  wire signed [15:0] product_mux_4; // sfix16_En15
  wire signed [31:0] product_5; // sfix32_En27
  wire signed [15:0] product_mux_5; // sfix16_En15
  wire signed [31:0] product_6; // sfix32_En27
  wire signed [15:0] product_mux_6; // sfix16_En15
  wire signed [31:0] product_7; // sfix32_En27
  wire signed [15:0] product_mux_7; // sfix16_En15
  wire signed [31:0] product_8; // sfix32_En27
  wire signed [15:0] product_mux_8; // sfix16_En15
  wire signed [31:0] sum1; // sfix32_En27
  wire signed [31:0] add_cast; // sfix32_En27
  wire signed [31:0] add_cast_1; // sfix32_En27
  wire signed [32:0] add_temp; // sfix33_En27
  wire signed [31:0] sum2; // sfix32_En27
  wire signed [31:0] add_cast_2; // sfix32_En27
  wire signed [31:0] add_cast_3; // sfix32_En27
  wire signed [32:0] add_temp_1; // sfix33_En27
  wire signed [31:0] sum3; // sfix32_En27
  wire signed [31:0] add_cast_4; // sfix32_En27
  wire signed [31:0] add_cast_5; // sfix32_En27
  wire signed [32:0] add_temp_2; // sfix33_En27
  wire signed [31:0] sum4; // sfix32_En27
  wire signed [31:0] add_cast_6; // sfix32_En27
  wire signed [31:0] add_cast_7; // sfix32_En27
  wire signed [32:0] add_temp_3; // sfix33_En27
  wire signed [31:0] sum5; // sfix32_En27
  wire signed [31:0] add_cast_8; // sfix32_En27
  wire signed [31:0] add_cast_9; // sfix32_En27
  wire signed [32:0] add_temp_4; // sfix33_En27
  wire signed [31:0] sum6; // sfix32_En27
  wire signed [31:0] add_cast_10; // sfix32_En27
  wire signed [31:0] add_cast_11; // sfix32_En27
  wire signed [32:0] add_temp_5; // sfix33_En27
  wire signed [31:0] sum7; // sfix32_En27
  wire signed [31:0] add_cast_12; // sfix32_En27
  wire signed [31:0] add_cast_13; // sfix32_En27
  wire signed [32:0] add_temp_6; // sfix33_En27
  wire signed [31:0] sum8; // sfix32_En27
  wire signed [31:0] add_cast_14; // sfix32_En27
  wire signed [31:0] add_cast_15; // sfix32_En27
  wire signed [32:0] add_temp_7; // sfix33_En27
  wire signed [15:0] output_typeconvert; // sfix16_En12
  reg  signed [15:0] regout; // sfix16_En12
  wire signed [15:0] muxout; // sfix16_En12

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        cur_count <= 2'b00;
      end
      else begin
        if (enb_1_2500000_1 == 1'b1) begin
          if (cur_count >= 2'b11) begin
            cur_count <= 2'b00;
          end
          else begin
            cur_count <= cur_count + 2'b01;
          end
        end
      end
    end // ce_output

  assign  phase_3 = (cur_count == 2'b11 && enb_1_2500000_1 == 1'b1) ? 1'b1 : 1'b0;

  //   ---------------- Delay Registers ----------------

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
      end
      else begin
        if (phase_3 == 1'b1) begin
          delay_pipeline[0] <= FIR_Interpolation_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
        end
      end
    end // Delay_Pipeline_process


  assign product_mux = (cur_count == 2'b00) ? coeffphase1_9 :
                      (cur_count == 2'b01) ? coeffphase2_9 :
                      (cur_count == 2'b10) ? coeffphase3_9 :
                      coeffphase4_9;
  assign product = delay_pipeline[7] * product_mux;

  assign product_mux_1 = (cur_count == 2'b00) ? coeffphase1_8 :
                        (cur_count == 2'b01) ? coeffphase2_8 :
                        (cur_count == 2'b10) ? coeffphase3_8 :
                        coeffphase4_8;
  assign product_1 = delay_pipeline[6] * product_mux_1;

  assign product_mux_2 = (cur_count == 2'b00) ? coeffphase1_7 :
                        (cur_count == 2'b01) ? coeffphase2_7 :
                        (cur_count == 2'b10) ? coeffphase3_7 :
                        coeffphase4_7;
  assign product_2 = delay_pipeline[5] * product_mux_2;

  assign product_mux_3 = (cur_count == 2'b00) ? coeffphase1_6 :
                        (cur_count == 2'b01) ? coeffphase2_6 :
                        (cur_count == 2'b10) ? coeffphase3_6 :
                        coeffphase4_6;
  assign product_3 = delay_pipeline[4] * product_mux_3;

  assign product_mux_4 = (cur_count == 2'b00) ? coeffphase1_5 :
                        (cur_count == 2'b01) ? coeffphase2_5 :
                        (cur_count == 2'b10) ? coeffphase3_5 :
                        coeffphase4_5;
  assign product_4 = delay_pipeline[3] * product_mux_4;

  assign product_mux_5 = (cur_count == 2'b00) ? coeffphase1_4 :
                        (cur_count == 2'b01) ? coeffphase2_4 :
                        (cur_count == 2'b10) ? coeffphase3_4 :
                        coeffphase4_4;
  assign product_5 = delay_pipeline[2] * product_mux_5;

  assign product_mux_6 = (cur_count == 2'b00) ? coeffphase1_3 :
                        (cur_count == 2'b01) ? coeffphase2_3 :
                        (cur_count == 2'b10) ? coeffphase3_3 :
                        coeffphase4_3;
  assign product_6 = delay_pipeline[1] * product_mux_6;

  assign product_mux_7 = (cur_count == 2'b00) ? coeffphase1_2 :
                        (cur_count == 2'b01) ? coeffphase2_2 :
                        (cur_count == 2'b10) ? coeffphase3_2 :
                        coeffphase4_2;
  assign product_7 = delay_pipeline[0] * product_mux_7;

  assign product_mux_8 = (cur_count == 2'b00) ? coeffphase1_1 :
                        (cur_count == 2'b01) ? coeffphase2_1 :
                        (cur_count == 2'b10) ? coeffphase3_1 :
                        coeffphase4_1;
  assign product_8 = FIR_Interpolation_in * product_mux_8;

  assign add_cast = product_8;
  assign add_cast_1 = product_7;
  assign add_temp = add_cast + add_cast_1;
  assign sum1 = add_temp[31:0];

  assign add_cast_2 = sum1;
  assign add_cast_3 = product_6;
  assign add_temp_1 = add_cast_2 + add_cast_3;
  assign sum2 = add_temp_1[31:0];

  assign add_cast_4 = sum2;
  assign add_cast_5 = product_5;
  assign add_temp_2 = add_cast_4 + add_cast_5;
  assign sum3 = add_temp_2[31:0];

  assign add_cast_6 = sum3;
  assign add_cast_7 = product_4;
  assign add_temp_3 = add_cast_6 + add_cast_7;
  assign sum4 = add_temp_3[31:0];

  assign add_cast_8 = sum4;
  assign add_cast_9 = product_3;
  assign add_temp_4 = add_cast_8 + add_cast_9;
  assign sum5 = add_temp_4[31:0];

  assign add_cast_10 = sum5;
  assign add_cast_11 = product_2;
  assign add_temp_5 = add_cast_10 + add_cast_11;
  assign sum6 = add_temp_5[31:0];

  assign add_cast_12 = sum6;
  assign add_cast_13 = product_1;
  assign add_temp_6 = add_cast_12 + add_cast_13;
  assign sum7 = add_temp_6[31:0];

  assign add_cast_14 = sum7;
  assign add_cast_15 = product;
  assign add_temp_7 = add_cast_14 + add_cast_15;
  assign sum8 = add_temp_7[31:0];

  assign output_typeconvert = sum8[30:15];

  always @ (posedge clk or posedge reset)
    begin: DataHoldRegister_process
      if (reset == 1'b1) begin
        regout <= 0;
      end
      else begin
        if (enb_1_2500000_1 == 1'b1) begin
          regout <= output_typeconvert;
        end
      end
    end // DataHoldRegister_process

  assign muxout = (enb_1_2500000_1 == 1'b1) ? output_typeconvert :
            regout;
  // Assignment Statements
  assign FIR_Interpolation_out = muxout;
endmodule  // FIR_Interpolation
